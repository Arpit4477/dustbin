<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Dustbins and Sensor Data</title>
    <link rel="stylesheet" href="header.css">
    <link rel="stylesheet" href="style.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
        }

        h1 {
            text-align: center;
            margin-top: 20px;
        }

        #filter {
            width: 80%;
            margin: 20px auto;
            text-align: center;
        }

        select {
            padding: 5px;
            font-size: 16px;
            margin-bottom: 20px;
        }

        #download-btn {
            padding: 10px 15px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 20px;
        }

        #download-btn:hover {
            background-color: #0056b3;
        }

        table {
            width: 80%;
            margin: 20px auto;
            border-collapse: collapse;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        table, th, td {
            border: 1px solid #ddd;
        }

        th, td {
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
        }

        button {
            padding: 5px 10px;
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        button:hover {
            background-color: #c82333;
        }
    </style>
</head>
<body>
    <div id="header-placeholder"></div>
    <h1>Your Dustbins and Sensor Data</h1>
    
    <!-- Filter dropdown -->
    <div id="filter">
        <label for="locationFilter">Filter by Location:</label>
        <select id="locationFilter" onchange="filterDustbinsByLocation()">
            <option value="all">All Locations</option>
            <!-- Options will be populated dynamically -->
        </select>
    </div>

    <!-- Download CSV Button -->
    <div id="download-container" style="text-align:center;">
        <button id="download-btn" onclick="downloadCSV()">Download CSV</button>
    </div>
    
    <table id="dustbinsTable">
        <thead>
            <tr>
                <th>Location ID</th>
                <th>Device ID</th>
                <th>Sensor 1</th>
                <th>Sensor 2</th>
                <th>Battery</th>
                <th>Voltage</th>
                <th>Last Updated</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <!-- Data will be populated here -->
        </tbody>
    </table>

    <script>
        let dustbins = [];

        async function fetchDustbinsAndSensors() {
            try {
                const response = await fetch('/api/dustbins');
                dustbins = await response.json();
                
                populateLocationFilter();
                filterDustbinsByLocation();
            } catch (error) {
                console.error('Error:', error);
            }
        }

        function populateLocationFilter() {
            const locationFilter = document.getElementById('locationFilter');
            const uniqueLocations = [...new Set(dustbins.map(dustbin => dustbin.locationId))];

            uniqueLocations.forEach(location => {
                const option = document.createElement('option');
                option.value = location;
                option.textContent = `${location}`;
                locationFilter.appendChild(option);
            });
        }

        async function filterDustbinsByLocation() {
            const selectedLocation = document.getElementById('locationFilter').value;
            const tableBody = document.getElementById('dustbinsTable').getElementsByTagName('tbody')[0];
            tableBody.innerHTML = ''; // Clear previous rows

            const filteredDustbins = selectedLocation === 'all' ? dustbins : dustbins.filter(dustbin => dustbin.locationId === selectedLocation);
            
            for (const dustbin of filteredDustbins) {
                const sensorResponse = await fetch(`/api/sensors/all/${dustbin.deviceId}`);
                const sensorData = await sensorResponse.json();

                sensorData.forEach(sensor => {
                    const row = document.createElement('tr');
                    
                    const locationIdCell = document.createElement('td');
                    locationIdCell.textContent = dustbin.locationId;
                    row.appendChild(locationIdCell);

                    const deviceIdCell = document.createElement('td');
                    deviceIdCell.textContent = dustbin.deviceId;
                    row.appendChild(deviceIdCell);

                    const sensor1Cell = document.createElement('td');
                    sensor1Cell.textContent = sensor.s1;
                    row.appendChild(sensor1Cell);

                    const sensor2Cell = document.createElement('td');
                    sensor2Cell.textContent = sensor.s2;
                    row.appendChild(sensor2Cell);

                    const batteryCell = document.createElement('td');
                    batteryCell.textContent = sensor.b;
                    row.appendChild(batteryCell);

                    const voltageCell = document.createElement('td');
                    voltageCell.textContent = sensor.v;
                    row.appendChild(voltageCell);

                    const updatedAtCell = document.createElement('td');
                    updatedAtCell.textContent = new Date(sensor.createdAt).toLocaleString();
                    row.appendChild(updatedAtCell);

                    // Add delete button
                    const actionsCell = document.createElement('td');
                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'Delete';
                    deleteButton.onclick = () => deleteDustbin(dustbin.deviceId, row); // Pass the row to delete
                    actionsCell.appendChild(deleteButton);
                    row.appendChild(actionsCell);

                    tableBody.appendChild(row);
                });
            }
        }

        async function deleteDustbin(deviceId, row) {
            try {
                const response = await fetch(`/api/dustbins/delete/${deviceId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    // Remove the row from the table
                    row.remove();
                    console.log(`Dustbin with Device ID ${deviceId} deleted.`);
                } else {
                    console.error('Failed to delete dustbin.');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        function convertToCSV(data) {
            const headers = ['Location ID', 'Device ID', 'Sensor 1', 'Sensor 2', 'Battery', 'Voltage', 'Last Updated'];
            const csvRows = [];

            csvRows.push(headers.join(',')); // Add headers to the CSV file

            data.forEach(dustbin => {
                dustbin.sensors.forEach(sensor => {
                    const row = [
                        dustbin.locationId,
                        dustbin.deviceId,
                        sensor.s1,
                        sensor.s2,
                        sensor.b,
                        sensor.v,
                        new Date(sensor.createdAt).toLocaleString()
                    ];
                    csvRows.push(row.join(','));
                });
            });

            return csvRows.join('\n');
        }

        async function downloadCSV() {
            const selectedLocation = document.getElementById('locationFilter').value;
            const filteredDustbins = selectedLocation === 'all' ? dustbins : dustbins.filter(dustbin => dustbin.locationId === selectedLocation);
            const enrichedDustbins = [];

            for (const dustbin of filteredDustbins) {
                const sensorResponse = await fetch(`/api/sensors/all/${dustbin.deviceId}`);
                const sensorData = await sensorResponse.json();
                enrichedDustbins.push({ ...dustbin, sensors: sensorData });
            }

            const csvData = convertToCSV(enrichedDustbins);
            const blob = new Blob([csvData], { type: 'text/csv' });
            const url = URL.createObjectURL(blob);

            const link = document.createElement('a');
            link.href = url;
            link.download = 'dustbins_data.csv';

            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // Fetch and display dustbins and sensor data when page loads
        document.addEventListener('DOMContentLoaded', fetchDustbinsAndSensors);
    </script>
    <script src="loadheader.js"></script>
</body>
</html>
