<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Dustbins and Sensor Data</title>
    <link rel="stylesheet" href="header.css">
    <link rel="stylesheet" href="style.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
        }

        h1 {
            text-align: center;
            margin-top: 20px;
        }

        #filter {
            width: 80%;
            margin: 20px auto;
            text-align: center;
        }

        select {
            padding: 5px;
            font-size: 16px;
            margin-bottom: 10px;
        }

        #download-btn {
            padding: 10px 15px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 10px;
        }

        #download-btn:hover {
            background-color: #0056b3;
        }

        table {
            width: 80%;
            margin: 20px auto;
            border-collapse: collapse;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        table, th, td {
            border: 1px solid #ddd;
        }

        th, td {
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
        }

        button {
            padding: 5px 10px;
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        button:hover {
            background-color: #c82333;
        }
    </style>
</head>
<body>
    <nav>
        <a href="/">Home</a>
        <% if (user.role === 'admin') { %>
            <a href="/admin">Admin</a>
            <a href="/register">Add User</a>
            <a href="/addSite">Add Site</a>
            <a href="/add">Add Dustbin</a>
        <% } %>
        <a href="/dustbin-data">Dustbin Data</a>
        <a href="/logout">Logout</a>
    </nav>
    
    <h1>Your Dustbins and Sensor Data</h1>
    
    <div id="filter">
        <label for="locationFilter">Filter by Location:</label>
        <select id="locationFilter" onchange="saveFiltersAndUpdate()">
            <option value="all">All Locations</option>
        </select>

        <label for="deviceIdFilter">Filter by Device ID:</label>
        <select id="deviceIdFilter" onchange="saveFiltersAndUpdate()">
            <option value="all">All Devices</option>
        </select>
    </div>

    <div id="download-container" style="text-align:center;">
        <button id="download-btn" onclick="downloadCSV()">Download CSV</button>
    </div>
    
    <table id="dustbinsTable">
        <thead>
            <tr>
                <th>Location ID</th>
                <th>Device ID</th>
                <th>Sensor 1</th>
                <th>Sensor 2</th>
                <th>Battery</th>
                <th>Voltage</th>
                <th>Last Updated</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <script>
        let dustbins = [];

        async function fetchDustbinsAndSensors() {
    try {
        const response = await fetch('/api/dustbins');
        const newDustbins = await response.json();

        console.log("Fetched Dustbins:", newDustbins); // Debugging

        // If data is identical, do nothing (to prevent unnecessary updates)
        if (JSON.stringify(dustbins) === JSON.stringify(newDustbins)) {
            console.log("No new data. Skipping update.");
            return;
        }

        dustbins = newDustbins; // Update dustbins array
        filterDustbinsByFilters(); // Refresh only the table
    } catch (error) {
        console.error('Error fetching dustbins:', error);
    }
}

        function updateFilters() {
            populateFilter('locationFilter', [...new Set(dustbins.map(d => d.locationId))]);
            populateFilter('deviceIdFilter', [...new Set(dustbins.map(d => d.deviceId))]);

            document.getElementById('locationFilter').value = localStorage.getItem('selectedLocation') || 'all';
            document.getElementById('deviceIdFilter').value = localStorage.getItem('selectedDeviceId') || 'all';
        }

        function populateFilter(filterId, options) {
            const filterElement = document.getElementById(filterId);
            const currentOptions = new Set([...filterElement.options].map(opt => opt.value));

            if (!options.every(opt => currentOptions.has(opt))) {
                filterElement.innerHTML = '<option value="all">All</option>';
                options.forEach(opt => {
                    const option = document.createElement('option');
                    option.value = opt;
                    option.textContent = opt;
                    filterElement.appendChild(option);
                });
            }
        }

        function saveFiltersAndUpdate() {
            localStorage.setItem('selectedLocation', document.getElementById('locationFilter').value);
            localStorage.setItem('selectedDeviceId', document.getElementById('deviceIdFilter').value);
            filterDustbinsByFilters();
        }

        async function filterDustbinsByFilters() {
    const selectedLocation = localStorage.getItem('selectedLocation') || 'all';
    const selectedDeviceId = localStorage.getItem('selectedDeviceId') || 'all';
    const tableBody = document.querySelector('#dustbinsTable tbody');
    tableBody.innerHTML = ''; // Clear only tbody (not the entire table)

    console.log("Applying Filters - Location:", selectedLocation, "Device ID:", selectedDeviceId); // Debugging

    const filteredDustbins = dustbins.filter(d => 
        (selectedLocation === 'all' || d.locationId === selectedLocation) &&
        (selectedDeviceId === 'all' || d.deviceId === selectedDeviceId)
    );

    for (const dustbin of filteredDustbins) {
        try {
            const sensorResponse = await fetch(`/api/sensors/all/${dustbin.deviceId}`);
            const sensorData = await sensorResponse.json();

            sensorData.reverse(); // Show latest data first

            sensorData.forEach(sensor => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${dustbin.locationId}</td>
                    <td>${dustbin.deviceId}</td>
                    <td>${sensor.s1}</td>
                    <td>${sensor.s2}</td>
                    <td>${sensor.b}</td>
                    <td>${sensor.v}</td>
                    <td>${new Date(sensor.createdAt).toLocaleString()}</td>
                    <td><button onclick="deleteSensorData('${sensor._id}')">Delete</button></td>
                `;
                tableBody.appendChild(row);
            });
        } catch (error) {
            console.error(`Error fetching sensor data for ${dustbin.deviceId}:`, error);
        }
    }
}

        async function deleteSensorData(sensorId) {
            try {
                const response = await fetch(`/sensors/delete/${sensorId}`, { method: 'DELETE' });

                if (response.ok) {
                    fetchDustbinsAndSensors();
                } else {
                    alert('Error deleting sensor data.');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }


        async function downloadCSV() {
    const selectedLocation = localStorage.getItem('selectedLocation') || 'all';
    const selectedDeviceId = localStorage.getItem('selectedDeviceId') || 'all';

    const filteredDustbins = dustbins.filter(d =>
        (selectedLocation === 'all' || d.locationId === selectedLocation) &&
        (selectedDeviceId === 'all' || d.deviceId === selectedDeviceId)
    );

    const enrichedDustbins = [];

    for (const dustbin of filteredDustbins) {
        try {
            const sensorResponse = await fetch(`/api/sensors/all/${dustbin.deviceId}`);
            const sensorData = await sensorResponse.json();
            enrichedDustbins.push({ ...dustbin, sensors: sensorData });
        } catch (error) {
            console.error(`Error fetching sensor data for ${dustbin.deviceId}:`, error);
        }
    }

    const csvData = convertToCSV(enrichedDustbins);
    const blob = new Blob([csvData], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = url;
    link.download = 'dustbins_data.csv';

    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

function convertToCSV(data) {
    const headers = ['Location ID', 'Device ID', 'Sensor 1', 'Sensor 2', 'Battery', 'Voltage', 'Last Updated'];
    const csvRows = [];

    csvRows.push(headers.join(',')); // Add headers to CSV file

    data.forEach(dustbin => {
        dustbin.sensors.forEach(sensor => {
            const row = [
                dustbin.locationId,
                dustbin.deviceId,
                sensor.s1,
                sensor.s2,
                sensor.b,
                sensor.v,
                new Date(sensor.createdAt).toLocaleString()
            ];
            csvRows.push(row.join(','));
        });
    });

    return csvRows.join('\n');
}

        setInterval(fetchDustbinsAndSensors, 10000);
document.addEventListener('DOMContentLoaded', fetchDustbinsAndSensors);
    </script>
</body>
</html>
